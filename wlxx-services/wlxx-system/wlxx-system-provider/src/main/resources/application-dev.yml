spring:
  datasource:
    #    driverClassName: org.postgresql.Driver
    #    password: xiao
    #    url: jdbc:postgresql://192.168.1.106:5432/db_system
    #    username: postgres
    url: jdbc:mysql://${DATASOURCE_URL:localhost}:3306/${SCHEMA_NAME:db_system}?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true
    driverClassName: com.mysql.cj.jdbc.Driver
    username: root
    password: xiao
    hikari:
      # 最小空闲连接数量
      minimum-idle: 5
      # 空闲连接存活最大时间，默认600000（10分钟）
      idle-timeout: 180000
      # 连接池最大连接数，默认是10
      maximum-pool-size: 30
      # 此属性控制从池返回的连接的默认自动提交行为,默认值：true
      auto-commit: true
      # 连接池名称
      pool-name: MyHikariCP
      # 此属性控制池中连接的最长生命周期，值0表示无限生命周期，默认1800000即30分钟
      max-lifetime: 1800000
      # 数据库连接超时时间,默认30秒，即30000
      connection-timeout: 30000
      connection-test-query: SELECT 1
  resources:
    add-mappings: false

logging:
  level:
    root: info
    com.xzg.wlxx: debug
  file:
    # 日志文件名格式
    name: "logs/${spring.application.name}.log"
    pattern:
      # 日志记录格式[组件名称] [时间戳] [日志级别] [类名.方法名] [消息文本]
      file: "${spring.application.name} %d{yyyy-MM-dd HH:mm:ss.SSS} %p %C.%M %m %n"
    logback:
      rollingpolicy:
        # 根据文件大小归档，超过2KB自动归档，次日启动服务时也会自动归档
        file-name-pattern: "%d{yyyyMMdd}/${spring.application.name}.out.log.%d{yyyy-MM-dd}.%i.gz"
        # 最大日志文件大小(默认为10MB，这里为了测试归档，暂时设置为2KB)
        max-file-size: 2KB
        # 要保留的日志备份的总大小(默认为0B)
        total-size-cap: 1GB
        # 保存存档日志文件的最大天数(默认为7天)
        max-history: 20

springdoc:
  packages-to-scan: com.xzg.wlxx
  swagger-ui:
    path: /swagger-ui.html
    tags-sorter: alpha
    operations-sorter: alpha
  api-docs:
    path: /v3/api-docs
  group-configs:
    - group: 'default'
      paths-to-match: '/**'
      packages-to-scan: com.github.xiaoymin.boot3

knife4j:
  enable: true
  setting:
    language: zh_cn
    swagger-model-name: 实体类列表
#
#  documents:
#    - name: 标题1
#      locations: classpath:markdown/*
#      group: default
#    - name: 标题2
#      locations: classpath:markdown1/*
#      group: 用户模块

server:
  port: 12002
#  error:
#    path: /wlxx/error


