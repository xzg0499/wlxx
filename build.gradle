

buildscript {
	dependencies {
		classpath('com.bmuschko:gradle-docker-plugin:6.7.0')
		classpath("io.spring.gradle:dependency-management-plugin")
	}
}

plugins{
	id 'org.springframework.boot' version '2.4.7'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
}

// 引入外部gradle文件
apply from: './version.gradle'





allprojects{
	apply plugin: 'java'
	apply plugin: 'idea'
	apply plugin: 'org.springframework.boot'
	apply plugin: 'io.spring.dependency-management'

	group = 'com.xzg'
	version = '0.0.1-SNAPSHOT'
// 编译环境 JDK1.8
	sourceCompatibility = "${javaVersion}"
	targetCompatibility = "${javaVersion}"

// java编译的时候缺省状态下会因为中文字符而失败
	[compileJava,compileTestJava,javadoc]*.options*.encoding = 'UTF-8'

	tasks.withType(JavaCompile) {
		options.encoding = "UTF-8"
	}

	bootJar{
		enabled(false)
	}

	jar{
		enabled(true)
	}

	dependencyManagement{
		// 引入依赖管理工具
		imports{
			mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
			mavenBom("org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}")
			mavenBom("com.alibaba.cloud:spring-cloud-alibaba-dependencies:${springCloudAlibabaVersion}")
//			mavenBom('com.alibaba.cloud:spring-cloud-alibaba-dependencies:2.1.2.RELEASE')
		}
	}

	dependencies {
		/*spring boot*/
		implementation("org.springframework.boot:spring-boot-starter")
//		implementation("org.springframework.cloud:spring-cloud-starter-bootstrap")
		implementation 'org.springframework.boot:spring-boot-starter-web'
		implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
		testImplementation('org.springframework.boot:spring-boot-starter-test'){
			exclude group:'org.junit.vintage' ,module:'junit-vintage-engine'
		}

		implementation("com.alibaba.cloud:spring-cloud-starter-alibaba-nacos-discovery")
		implementation("com.alibaba.cloud:spring-cloud-starter-alibaba-nacos-config")
		implementation("org.springframework.cloud:spring-cloud-starter-bootstrap")

		/*redis*/
		implementation "org.springframework.boot:spring-boot-starter-data-redis"

		/*lombok*/
		compileOnly "org.projectlombok:lombok:${lombokVersion}"
		annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
		testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
		testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

		/*mybatis-plus*/
		implementation "com.baomidou:mybatis-plus-boot-starter:${mybatisPlusVersion}"

		/*mysql*/
		implementation group: 'mysql', name: 'mysql-connector-java', version: "${mysqlVersion}"

		/*knife4j*/
		implementation group: 'com.github.xiaoymin', name: 'knife4j-spring-boot-starter', version: "${knife4jVersion}"

		/*hutool*/
		implementation group: 'cn.hutool', name: 'hutool-all', version: "${hutoolVersion}"

		/*fastjson*/
		implementation group: 'com.alibaba', name: 'fastjson', version: "${fastjsonVersion}"

		/*faker*/
		implementation group: 'com.github.javafaker', name: 'javafaker', version: "${javafakerVersion}"

		/*jupiter*/
		testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: "${jupiterVersion}"



	}

	repositories {
		mavenLocal()
		maven { url 'https://maven.aliyun.com/repository/central' }
		maven { url 'https://maven.aliyun.com/repository/spring' }
		maven { url 'https://maven.aliyun.com/repository/google' }
		mavenCentral()
		maven { url 'https://repo.spring.io/release' }
		maven { url 'https://repo.spring.io/milestone' }
	}

	test {
		useJUnitPlatform()
	}

	sourceSets{

	}
}