buildscript {
    dependencies {
        classpath('com.bmuschko:gradle-docker-plugin:6.7.0')
        classpath("io.spring.gradle:dependency-management-plugin")
    }

//	tasks.each { task ->
//		if (task.name.contains("test"))
//		{
//			task.enabled = false
//		}
//	}
}

plugins {
    id 'org.springframework.boot' version '2.4.7'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
}


// 引入外部gradle文件
apply from: './version.gradle'

allprojects {
    group = 'com.xzg'
    version = '0.0.1'
    // 编译环境 JDK1.8
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    repositories {
        mavenLocal()
        maven { url 'https://maven.aliyun.com/repository/central' }
        maven { url 'https://maven.aliyun.com/repository/spring' }
        maven { url 'https://maven.aliyun.com/repository/google' }
        mavenCentral()
        jcenter()
        maven { url 'https://repo.spring.io/release' }
        maven { url 'https://repo.spring.io/milestone' }
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'


// java编译的时候缺省状态下会因为中文字符而失败
    [compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }

    jar {
        def dir = projectDir
        def subDir = dir.list().findAll { f -> f.startsWith("wlxx-") }
        if (subDir.size() > 0) {
            enabled(false)
        } else {
            enabled(false)
        }
    }

    bootJar {
        def dir = projectDir
        def subDir = dir.list().findAll { f -> f.startsWith("wlxx-") }
        if (subDir.size() > 0) {
            enabled(false)
        } else {
            enabled(true)
        }
    }

    dependencyManagement {
        // 引入依赖管理工具
        imports {
            mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
            mavenBom("org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}")
            mavenBom("com.alibaba.cloud:spring-cloud-alibaba-dependencies:${springCloudAlibabaVersion}")
        }
    }

    dependencies {
        /*spring boot*/
        implementation("org.springframework.boot:spring-boot-starter")
//		implementation("org.springframework.cloud:spring-cloud-starter-bootstrap")
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.boot:spring-boot-starter-security'
        implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
//		implementation("io.github.openfeign:feign-jackson")
//		implementation("io.github.openfeign:feign-gson")
//		implementation("com.fasterxml.jackson.datatype:jackson-datatype-jsr310")
        implementation 'org.springframework.cloud:spring-cloud-starter-loadbalancer'
        testImplementation('org.springframework.boot:spring-boot-starter-test') {
            exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        }

        implementation("com.alibaba.cloud:spring-cloud-starter-alibaba-nacos-discovery")
        implementation("com.alibaba.cloud:spring-cloud-starter-alibaba-nacos-config")
        implementation("org.springframework.cloud:spring-cloud-starter-bootstrap")

        // SpringBoot / Grails 项目直接使用以下依赖，更为方便（只添加这一个依赖即可）
        implementation "com.ejlchina:bean-searcher-boot-starter:${BeanSearcherVersion}"

        /*redis*/
        implementation "org.springframework.boot:spring-boot-starter-data-redis"

        /*lombok*/
        compileOnly "org.projectlombok:lombok:${lombokVersion}"
        annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
        testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
        testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

        /*mybatis-plus*/
        implementation "com.baomidou:mybatis-plus-boot-starter:${mybatisPlusVersion}"

        /*mysql*/
        implementation group: 'mysql', name: 'mysql-connector-java', version: "${mysqlVersion}"

        /*knife4j*/
        implementation group: 'com.github.xiaoymin', name: 'knife4j-spring-boot-starter', version: "${knife4jVersion}"

        /*hutool*/
        implementation group: 'cn.hutool', name: 'hutool-all', version: "${hutoolVersion}"

        /*fastjson*/
        implementation group: 'com.alibaba', name: 'fastjson', version: "${fastjsonVersion}"

        /*faker*/
        implementation group: 'com.github.javafaker', name: 'javafaker', version: "${javafakerVersion}"

        /*jupiter*/
        testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: "${jupiterVersion}"


        /*mybatis plus generator*/
        testImplementation group: 'com.baomidou', name: 'mybatis-plus-generator', version: "${mybatisPlusGeneratorVersion}"
        testImplementation group: 'org.apache.velocity', name: 'velocity-engine-core', version: "${velocityVersion}"
        testImplementation group: 'org.freemarker', name: 'freemarker', version: "${freemarkerVersion}"
        testImplementation group: 'com.ibeetl', name: 'beetl', version: "${ibeetlVersion}"

        /*fluent-mybatis*/
        implementation "com.github.atool:fluent-mybatis-boot-starter:${fluentMybatisVersion}"

        /*testng*/
        testImplementation("org.testng:testng:${testngVersion}")
    }


    test {
        useJUnitPlatform()
        enabled(false)
    }

//	sourceSets {
//		main {
//			java {
//				srcDirs = ['src/main/java', 'src/main/thrift-java']
//			}
//			resources {
//				srcDirs = ['src/main/resources']
//			}
//		}
//		test {
//			java {
//				srcDirs = ['src/test/java', 'src/test/thrift']
//			}
//			resources {
//				srcDirs = ['src/test/resources']
//			}
//		}
//	}
}