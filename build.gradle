buildscript {
    // 引入外部gradle文件
    apply from: './gradle/version.gradle'

    repositories {
        mavenLocal()
        maven {
            name "aliyun"
            url "https://maven.aliyun.com/repository/gradle-plugin"
        }
//        MPG仓库
        maven {
            name "plugins"
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath('com.bmuschko:gradle-docker-plugin:6.7.0')
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("io.spring.gradle:dependency-management-plugin:1.1.0")
        classpath("cn.mycommons:buildSrc:3.4.2.1")
    }
}


allprojects {
    group = 'com.xzg'
    version = '0.0.1'

    repositories {
        mavenLocal()
        maven {
            name "aliyun"
            url "https://maven.aliyun.com/repository/public"
        }
    }
}

configure(subprojects) {
    // 定义只打包末级
    def subList = subprojects.projectDir.asList().findAll(file -> file.getName().startsWith("wlxx-"))
    def isProvider = projectDir.name.endsWith("-provider")
    if (subList.size() > 0) {
        return
    }

    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    //apply(plugin: "cn.mycommons.mpg")
    //apply(from: rootDir.path + "/gradle/mpg.gradle")

    if (projectDir.name == "wlxx-core"
            || projectDir.name == "wlxx-web"
            || projectDir.name.endsWith("wlxx-test")
            || projectDir.name.endsWith("-client")
    ) {
        apply(plugin: 'java-library')
    }


    // java编译的时候缺省状态下会因为中文字符而失败
    [compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }

    // 编译环境 JDK17
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17

    jar {
        enabled(true)
    }

    build {
        buildDir("out")
    }


    bootJar {
        if (projectDir.getName().endsWith("-provider")) {
            enabled(true)
        } else {
            enabled(false)
        }
    }

    //extra["testcontainersVersion"] = "1.17.6"
    ext {
        set('testcontainersVersion', "1.17.6")
    }

    dependencyManagement {
        // 引入依赖管理工具
        imports {
            mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
            mavenBom("org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}")
            mavenBom("com.alibaba.cloud:spring-cloud-alibaba-dependencies:${springCloudAlibabaVersion}")
            //mavenBom("org.testcontainers:testcontainers-bom:${property("testcontainersVersion")}")
            mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
        }
    }

    dependencies {
        compileOnly("org.projectlombok:lombok:${lombokVersion}")
        annotationProcessor("org.projectlombok:lombok:${lombokVersion}")
        testCompileOnly("org.projectlombok:lombok:${lombokVersion}")
        testAnnotationProcessor("org.projectlombok:lombok:${lombokVersion}")
    }

    test {
        reports.html.enabled(true)
        useJUnitPlatform()
    }
}