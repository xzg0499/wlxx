buildscript {
    // 引入外部gradle文件
    apply from: './version.gradle'

    repositories {
        mavenLocal()
        maven {
            name "aliyun"
            url "https://maven.aliyun.com/repository/public"
        }
//        MPG仓库
        maven {
            name "plugins"
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath('com.bmuschko:gradle-docker-plugin:6.7.0')
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("io.spring.gradle:dependency-management-plugin:1.1.0")
        classpath("cn.mycommons:buildSrc:3.4.2.1")
    }
}


allprojects {
    group = 'com.xzg'
    version = '0.0.1'

    repositories {
        mavenLocal()
        maven {
            name "aliyun"
            url "https://maven.aliyun.com/repository/public"
        }
    }
}

configure(subprojects) {
    // 定义只打包末级
    def subList = subprojects.projectDir.asList().findAll(file -> file.getName().startsWith("wlxx-"))
    if (subList.size() > 0) {
        return
    }
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'


    // java编译的时候缺省状态下会因为中文字符而失败
    [compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }

    // 编译环境 JDK1.8
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    jar {
        enabled(true)
    }

    build {
        buildDir("out")
//        println(buildDir)`
    }


    bootJar {
        if (projectDir.getName().endsWith("-provider")) {
            enabled(true)
        } else {
            enabled(false)
        }
    }

    dependencyManagement {
        // 引入依赖管理工具
        imports {
            mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
            mavenBom("org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}")
            mavenBom("com.alibaba.cloud:spring-cloud-alibaba-dependencies:${springCloudAlibabaVersion}")
        }
    }

    dependencies {
        /*spring boot*/
        implementation("org.springframework.boot:spring-boot-starter")
        implementation("org.springframework.boot:spring-boot-starter-web")
        implementation("org.springframework.boot:spring-boot-starter-security")
        implementation("org.springframework.boot:spring-boot-starter-validation")
        implementation("org.springframework.cloud:spring-cloud-starter-openfeign")
        implementation("org.springframework.cloud:spring-cloud-starter-loadbalancer")
        testImplementation('org.springframework.boot:spring-boot-starter-test') {
            exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        }

        implementation("com.alibaba.cloud:spring-cloud-starter-alibaba-nacos-discovery")
        implementation("com.alibaba.cloud:spring-cloud-starter-alibaba-nacos-config")
        implementation("org.springframework.cloud:spring-cloud-starter-bootstrap")

        // SpringBoot / Grails 项目直接使用以下依赖，更为方便（只添加这一个依赖即可）
        implementation("com.ejlchina:bean-searcher-boot-starter:${beanSearcherVersion}")

        /*redis*/
        implementation("org.springframework.boot:spring-boot-starter-data-redis")

        /*lombok*/
        compileOnly("org.projectlombok:lombok:${lombokVersion}")
        annotationProcessor("org.projectlombok:lombok:${lombokVersion}")
        testCompileOnly("org.projectlombok:lombok:${lombokVersion}")
        testAnnotationProcessor("org.projectlombok:lombok:${lombokVersion}")

        /*mybatis-plus*/
        implementation "com.baomidou:mybatis-plus-boot-starter:${mybatisPlusVersion}"

        /*mysql*/
        implementation group: 'mysql', name: 'mysql-connector-java', version: "${mysqlVersion}"

        /*knife4j*/
        implementation group: 'com.github.xiaoymin', name: 'knife4j-spring-boot-starter', version: "${knife4jVersion}"

        /*hutool*/
        implementation group: 'cn.hutool', name: 'hutool-all', version: "${hutoolVersion}"

        /*fastjson*/
        implementation group: 'com.alibaba', name: 'fastjson', version: "${fastjsonVersion}"

        /*faker*/
        implementation group: 'com.github.javafaker', name: 'javafaker', version: "${javafakerVersion}"

        /*jmockdata*/
        testImplementation("com.github.jsonzou:jmockdata:4.3.0")

        /*pinyin4j*/
        implementation("com.belerweb:pinyin4j:2.5.1")

        /*jupiter*/
        testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: "${jupiterVersion}"

        /*mybatis plus generator*/
        testImplementation group: 'com.baomidou', name: 'mybatis-plus-generator', version: "${mybatisPlusGeneratorVersion}"
        testImplementation group: 'org.apache.velocity', name: 'velocity-engine-core', version: "${velocityVersion}"
        testImplementation group: 'org.freemarker', name: 'freemarker', version: "${freemarkerVersion}"
        testImplementation group: 'com.ibeetl', name: 'beetl', version: "${ibeetlVersion}"

        /*fluent-mybatis*/
//        implementation "com.github.atool:fluent-mybatis-boot-starter:${fluentMybatisVersion}"

        /*testng*/
        testImplementation("org.testng:testng:${testngVersion}")

        /*TODO Could not find snakeyaml-1.30-android.jar*/
        implementation 'org.yaml:snakeyaml:1.28'
    }


    test {
        useTestNG()
    }
}