buildscript {
	repositories {
		gradlePluginPortal()
		jcenter()
	}
	dependencies{
//		classpath: 'com.alibaba.cloud:spring-cloud-alibaba-dependencies'
	}
}

plugins {
//	TODO 要集成flowable需要将spring boot的版本修改为：2.2.0.RELEASE，目前仅支持到这个版本
	id 'org.springframework.boot' version '2.4.5' apply false
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'  apply false
//	id group: 'com.bmuschko',module: 'gradle-docker-plugin',version: '7.1.0'
//	id 'com.alibaba.cloud'
	id 'java'
}


task buildDocker {
	def releaseTime= new Date().format("HHmmss", TimeZone.getTimeZone("GMT+08:00"))
	def buildImage = 'bs-devops:5000/${project.group}.${project.name}:${project.version}.build-${releaseTime()}'
	def image = 'bysun:5000/${project.group}.${project.name}:${project.version}'
	def debugImage = 'bs-devops:5000/${project.group}.${project.name}:${DEBUG_NAME}'
	def debugContainer = '${DEBUG_NAME}.${project.group}.${project.name}'

	print releaseTime
	print buildImage
	print image
	print debugImage
	print debugContainer
}

//task createImage {
//	from('bs-devops:5000/alpine-jre8:3.8-201')
//	addFile("libs/${project.name}-${project.version}.jar", "/app.jar")
//	exposePort(80)
//	defaultCommand('java', '-jar', "/app.jar")
//
//	images.add(buildImage())
//	images.add(image())
//}

configurations.all {
	resolutionStrategy{
		failOnVersionConflict()
	}
}

configure (subprojects){
	apply plugin: 'org.springframework.boot'
	apply plugin: 'io.spring.dependency-management'
//	apply plugin: 'com.alibaba.cloud'
	apply plugin: 'java'
	apply plugin: 'maven'

	group = 'com.xzg'
	version = '0.0.1-SNAPSHOT'
	sourceCompatibility = '8'
	targetCompatibility = '8'

	ext {
		set('springCloudVersion', "2020.0.2")
	}
	/*配置注解annotationProcessor*/
	configurations {
		compileOnly {
			extendsFrom annotationProcessor
		}
	}
	/*依赖*/
	dependencies {
		/* spring boot*/
		implementation 'org.springframework.cloud:spring-cloud-starter'
		implementation 'org.springframework.boot:spring-boot-starter-web'
		implementation 'org.springframework.boot:spring-boot-devtools'
		testImplementation('org.springframework.boot:spring-boot-starter-test'){
			exclude group:'org.springframework.boot',module:'spring-boot-autoconfigure'
		}
//		compileOnly 'org.springframework.boot:spring-boot-devtools'
		// https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-autoconfigure
//		implementation group: 'org.springframework.boot', name: 'spring-boot-autoconfigure'
		/* mysql driver*/
		runtimeOnly 'mysql:mysql-connector-java'
		/* lomnbok */
		compileOnly 'org.projectlombok:lombok'
		annotationProcessor 'org.projectlombok:lombok'
		testCompileOnly 'org.projectlombok:lombok'
		testAnnotationProcessor 'org.projectlombok:lombok'
		/* mybatis plus */
		implementation group: 'com.baomidou', name: 'mybatis-plus-boot-starter', version: '3.4.1'
		implementation group: 'com.baomidou', name: 'mybatis-plus-generator', version: '3.4.1'
		implementation group: 'org.apache.velocity', name: 'velocity-engine-core', version: '2.2'
		implementation group: 'org.freemarker', name: 'freemarker', version: '2.3.30'
		implementation group: 'com.ibeetl', name: 'beetl', version: '3.1.8.RELEASE'
		/* hutool util*/
		compileOnly 'cn.hutool:hutool-all:5.5.6'
		/* swagger api */
		implementation ('io.springfox:springfox-swagger2:2.9.2') {
			exclude group: 'org.springframework'
		}
		implementation ('io.springfox:springfox-swagger-ui:2.9.2'){
			exclude group: 'org.springframework'
		}
		/* activiti bps */
//		compile 'org.activiti:activiti-spring-boot-starter-basic:6.0.0'
		/* fastjson */
		implementation "com.alibaba:fastjson:1.2.76"
	}
	/*不知道干啥的*/
	dependencyManagement {
		imports {
			mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
		}
//		imports {
//			mavenBom 'com.alibaba.cloud:spring-cloud-alibaba-dependencies'
//		}
	}
	/*配置aliyun中央仓库*/
	repositories {
		mavenLocal()
		maven {
			allowInsecureProtocol = true
			name "aliyunmaven"
			url "http://maven.aliyun.com/nexus/content/groups/public/"
		}
		mavenCentral()
	}

	test {
		useJUnitPlatform()
	}
	/*设置java编译字符集*/
	tasks.withType(JavaCompile) {
		options.encoding = "UTF-8"
	}
	/*将模块打包为jar并上传到私服中，此处上传到本地库。解决各个模块间相互依赖问题*/

	uploadArchives {
		repositories {
			mavenDeployer {
				def localRepositoryPath = 'file://'+new File(System.getProperty('user.home'),'.m2/repository').absolutePath
				repository(url: localRepositoryPath)
				pom.project {
					name = project.name        // 当前项目名称
					version = project.version   //当前项目版本  0.0.1
					groupId = project.group     //  当前项目组  com.xxx
				}
			}
		}
	}

}


