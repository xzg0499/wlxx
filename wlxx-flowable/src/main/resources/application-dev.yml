spring:
  datasource:
    url: jdbc:mysql://${DATASOURCE_URL:localhost}:3306/${SCHEMA_NAME:db_flowable}?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true
    driverClassName: com.mysql.cj.jdbc.Driver
    username: root
    password: xiao
    hikari:
      # 最小空闲连接数量
      minimum-idle: 5
      # 空闲连接存活最大时间，默认600000（10分钟）
      idle-timeout: 180000
      # 连接池最大连接数，默认是10
      maximum-pool-size: 30
      # 此属性控制从池返回的连接的默认自动提交行为,默认值：true
      auto-commit: true
      # 连接池名称
      pool-name: MyHikariCP
      # 此属性控制池中连接的最长生命周期，值0表示无限生命周期，默认1800000即30分钟
      max-lifetime: 1800000
      # 数据库连接超时时间,默认30秒，即30000
      connection-timeout: 30000
      connection-test-query: SELECT 1
  main:
    allow-bean-definition-overriding: true

server:
  port: 12003
  tomcat:
    uri-encoding: UTF-8
  servlet:
    context-path: /${spring.application.name}
  compression:
    mime-types: application/json,application/xml,text/html,text/xml,text/plain
    enabled: true
    min-response-size: 4096

logging:
  level:
    root: info
    com.xzg.wlxx: debug
    com.ejlchina.searcher: debug
  file:
    # 日志文件名格式
    name: "logs/${spring.application.name}.log"
    pattern:
      # 日志记录格式[组件名称] [时间戳] [日志级别] [类名.方法名] [消息文本]
      file: "${spring.application.name} %d{yyyy-MM-dd HH:mm:ss.SSS} %p %C.%M %m %n"
    logback:
      rollingpolicy:
        # 根据文件大小归档，超过2KB自动归档，次日启动服务时也会自动归档
        file-name-pattern: "%d{yyyyMMdd}/${spring.application.name}.out.log.%d{yyyy-MM-dd}.%i.gz"
        # 最大日志文件大小(默认为10MB，这里为了测试归档，暂时设置为2KB)
        max-file-size: 2KB
        # 要保留的日志备份的总大小(默认为0B)
        total-size-cap: 1GB
        # 保存存档日志文件的最大天数(默认为7天)
        max-history: 20

bean-searcher:
  params:
    pagination:
      start: 1
  sql:
    default-mapping:
      table-prefix: t_
      underline-case: true
      redundant-suffixes: Po

flowable:
  async-executor-activate: false
  labelFontName: 宋体
  activityFontName: 宋体
  annotationFontName: 宋体
  form-field-validation-enabled: false
  experimental:
    debugger:
      enabled: true
  rest:
    app:
      authentication-mode: verify-privilege
  process:
    definition-cache-limit: 1
  idm:
    app:
      admin:
        password: test
        user-id: admin
        first-name: admin
        last-name: admin
        email: test-admin@example-domain.tld
  common:
    app:
      role-prefix:
      idm-url: http://localhost:${server.port}/${spring.application.name}/idm
  xml:
    encoding: UTF-8
  modeler:
    app:
      rest-enabled: true
  admin:
    app:
      security:
        encryption:
          credentials-secret-spec: 9FGl73ngxcOoJvmL
          credentials-i-v-spec: j8kdO2hejA9lKmm6
      server-config:
        app:
          context-root: ${spring.application.name}
          password: test
          server-address: http://localhost
          user-name: admin
          port: ${server.port}
          rest-root: app-api
          name: Flowable App app
          description: Flowable App REST config
        process:
          context-root: ${spring.application.name}
          server-address: http://localhost
          password: test
          user-name: admin
          rest-root: process-api
          port: ${server.port}
          name: Flowable Process app
          description: Flowable Process REST config
        form:
          context-root: ${spring.application.name}
          server-address: http://localhost
          password: test
          user-name: admin
          port: ${server.port}
          rest-root: form-api
          name: Flowable Form app
          description: Flowable Form REST config
        dmn:
          context-root: ${spring.application.name}
          server-address: http://localhost
          password: test
          user-name: admin
          port: ${server.port}
          rest-root: dmn-api
          name: Flowable DMN app
          description: Flowable DMN REST config
        cmmn:
          context-root: ${spring.application.name}
          password: test
          server-address: http://localhost
          user-name: admin
          port: ${server.port}
          rest-root: cmmn-api
          name: Flowable CMMN app
          description: Flowable CMMN REST config
        content:
          context-root: ${spring.application.name}
          server-address: http://localhost
          password: test
          user-name: admin
          rest-root: content-api
          port: ${server.port}
          name: Flowable Content app
          description: Flowable Content REST config
  database-schema-update: false
management:
  endpoint:
    health:
      roles: access-admin
      show-details: when_authorized
  endpoints:
    #    jmx:
    #      unique-names: true
    web:
      exposure:
        include: "*"
# MyBatis配置比较重要，手动去扫描Flowable默认的Mapper.xml，以及设置字段类型
mybatis:
  mapper-locations:
    - classpath:/META-INF/admin-mybatis-mappings/*.xml
    - classpath:/META-INF/modeler-mybatis-mappings/*.xml
  configuration-properties:
    prefix:
    boolValue: TRUE
    blobType: BLOB

