buildscript {
    dependencies {
        classpath: 'com.bmuschko:gradle-docker-plugin:6.0.0'
    }
}

plugins{
    id "com.bmuschko.docker-spring-boot-application" version "6.0.0"
}

//推送docker镜像
apply plugin: "com.bmuschko.docker-spring-boot-application"

docker {
    springBootApplication {
        baseImage = 'java:8' //指定运行镜像
        ports = [12000]  //暴露的端口
//		镜像名称和版本
        images = ["${project.group}/${rootProject.name}:${project.version}"]
//		jvmArgs = ["-Dspring.profiles.active=$env", '-Xmx2048m']  //启动参数
        jvmArgs = ["-Dspring.profiles.active=dev", '-Xmx2048m']  //启动参数
    }
    //如果url不指定的话
    // Unix系统默认：unix:///var/run/docker.sock
    //Windows系统默认：tcp://127.0.0.1:2375。
//    url = 'https://127.0.0.1:2375'
    url = 'http://47.110.139.158:2375'
}

dependencyManagement {

}

ext {
    set('springBootVersion', "2.1.1.RELEASE")
}

dependencies {
//    implementation 'io.pivotal.spring.cloud:spring-cloud-services-starter-service-registry'
//    implementation 'org.springframework.cloud:spring-cloud-starter-gateway'
//    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-server'
    implementation 'org.springframework.cloud:spring-cloud-starter-config'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.apache.httpcomponents:httpclient'
    testImplementation 'io.projectreactor:reactor-test'
//    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-hystrix'
//    implementation 'org.glassfish.jersey.core:jersey-server'
//    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
}


//dependencyManagement {
//    imports {
//        mavenBom "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
//    }
//}


bootJar {
    enabled(true)
    mainClassName('com.xzg.wlxx.eureka.EurekaApplication')
}

jar {
    enabled(true)
}
